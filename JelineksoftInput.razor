@using System.Collections
@using System.Collections.ObjectModel
@using System.ComponentModel
@using System.Dynamic
@using System.Threading
@using Jelineksoft.BlazorLibrary.Helpers
@using Jelineksoft.Logging
@inject ILogFactory Logger

<div class="jelineksoft-input">
    <div class="jelineksoft-input-label">@Label</div>
    <div class="jelineksoft-input-row">
        @{
            string xHide = "";
            if ((SelectedItem != null) && (IsOpen == false))
            {
                xHide = "w3-hide";
            }
                <input type="text"  inputmode="none" class="jelineksoft-input-input @xHide" @ref="refInputBox"
                       @bind-value="Text" @bind-value:event="oninput" autocomplete="off" 
                       @onkeyup="InputBoxOnKeyUpHandler" 
                       @onfocusin="OnFocusInHandler"
                />
        }

        @if ((SelectedItem != null) && (IsOpen == false))
        {
            <div class="jelineksoft-input-input-selected">@TextSelectedValue</div>
            if (ShowButtonClear)
            {
                var xT = "";
                <button tabindex="-1" class="jelineksoft-input-button" @onclick="(() => KeyboardButtonClick(xT, JelineksoftVirtualKeyboard.KeyboardButtonTypeEnum.SelectedItemDefault))">
                    <i class="fa fa-times"/>
                </button>
            }
        }
        
        @if ((SelectedItem == null) || (IsOpen == true))
        {
            
            @if (ShowButtonOpen)
            {
                <button tabindex="-1" class="jelineksoft-input-button" @onclick="OpenDropDownHandler">
                    <i class="fa fa-ellipsis-h"/>
                </button>
            }
        
        if (ShowButtonOK)
            {
                var xT = "";
                <button tabindex="-1" class="jelineksoft-input-button" @onclick="(() => KeyboardButtonClick(xT, JelineksoftVirtualKeyboard.KeyboardButtonTypeEnum.Enter))">
                    @if (ButtonOkString.Length > 0)
                    {
                        @ButtonOkString
                    }
                    else
                    {
                        <i class="fa fa-thumbs-up"/>
                    }

                </button>
            }
        }
    </div>


    <div class="@GetIsOpenClass()">
        <div class="jelineksoft-input-dropdown">
            @if (ShowKeyboardUI())
            {
                <JelineksoftVirtualKeyboard @ref="Keyboard" OnKeyClick="@VirtualKbClick"></JelineksoftVirtualKeyboard>            }

            @HeaderContent
            <table class="jelineksoft-input-table">
                @if (TableHeaderContent != null)
                {
                    <thead class="jelineksoft-input-table-header">
                    <tr>
                        @TableHeaderContent.Invoke(ItemsFiltered)
                    </tr>
                    </thead>
                }
                @if (ItemsFiltered != null)
                {
                    var xI = 0;
                    var xClass = "";
                    if (ItemStartIndex > ItemsFiltered.Count) ItemStartIndex = 0;
                    foreach (var item in ItemsFiltered)
                    {
                        if (xI >= ItemStartIndex)
                        {
                            if (xI >= ItemStartIndex + PageSize) break;
                            if (item == SelectedItem)
                            {
                                xClass = "jelineksoft-input-table-selecteditem";
                            }
                            else
                            {
                                xClass = "jelineksoft-input-table-row";
                            }
                            if (TableRowContent != null)
                            {
                                <tr tabindex="-1" @onkeyup="@InputBoxOnKeyUpHandler" class="@xClass" @onclick="@(() => { var xO = item; Console.WriteLine(xO); SetSelectedItem(xO); })">@TableRowContent.Invoke(item)</tr>
                            }
                            else
                            {
                                <tr tabindex="-1" @onkeyup="InputBoxOnKeyUpHandler" class="@xClass" @onclick="@(() => { var xO = item; Console.WriteLine(xO); SetSelectedItem(xO); })">@item.ToString()</tr>
                            }
                        }
                        xI++;
                    }
                }
            </table>
            @{
                if (ItemsFiltered != null)
                {
                    //Stranky
                    var x = ((double) ItemsFiltered.Count / (double) PageSize);
                    var xPgs = (int) Math.Ceiling(x);
                    if (xPgs > 1)
                    {
                        <div class="jelineksoft-input-pagesrow">
                            @for (var xPg = 0; xPg < xPgs; xPg++)
                            {
                                var xxPage = (xPg) * PageSize;
                                <button tabindex="-1" class="jelineksoft-input-btn-page" @onclick="(() => { ItemStartIndex = xxPage; StateHasChanged();})">@(xPg + 1)</button>
                            }
                        </div>
                    }
                }
            }
            <div>@FooterContent</div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string Label { get; set; }

    private string xText = "";

    [Parameter]
    public string Text
    {
        get
        {
            return xText;
        }
        set
        {
            if (xText != value)
            {
                LogT("Text property", $"Set xText value={value}");
                xText = value;
                LogT("Text property", "Call FilterItems");
                FilterItems(false);
                LogT("Text property", "Call OnTextChanged event");
                OnTextChanged.InvokeAsync(xText);
                TextChanged.InvokeAsync(xText);
            }
        }
    }

    private string xTextSelectedValue = "";

    [Parameter]
    public string TextSelectedValue
    {
        get { return xTextSelectedValue; }
        set
        {
            if (xTextSelectedValue != value)
            {
                xTextSelectedValue = value;
                LogT("TextSelectedValue property", "Set xTextSelectedValue = {value} and call event OnTextSelectedValueChanged.");
                OnTextSelectedValueChanged.InvokeAsync(xTextSelectedValue);
            }
        }
    }

    [Parameter]
    public bool ShowButtonBackspace { get; set; } = true;

    [Parameter]
    public bool ShowButtonClear { get; set; } = true;

    [Parameter]
    public bool ShowButtonOpen { get; set; } = false;

    [Parameter]
    public bool ShowButtonOK { get; set; } = true;

    [Parameter]
    public string ButtonOkString { get; set; } = "OK";


    [Parameter]
    public bool AutoOpenDropdownWhenFocus { get; set; } = false;

    [Parameter]
    public bool AutoSelectItem { get; set; } = true;

    [Parameter]
    public int PageSize { get; set; } = 10;

    [Parameter]
    public bool KeyTabCallOK { get; set; } = true;

    [Parameter]
    public bool KeyEnterCallOK { get; set; } = true;


    [Parameter]
    public bool? KeyboardShow { get; set; } = null;

    [Parameter]
    public JelineksoftVirtualKeyboard Keyboard { get; set; } = new JelineksoftVirtualKeyboard();

    [Parameter]
    public string KeyboardCustomKeys
    {
        get { return Keyboard.KeyboardCustomKeys; }
        set { Keyboard.KeyboardCustomKeys = value; }
    }

    [Parameter]
    public string KeyboardCustomKeysSeparator
    {
        get { return Keyboard.KeyboardCustomKeysSeparator; }
        set { Keyboard.KeyboardCustomKeysSeparator = value; }
    }


    [Parameter]
    public RenderFragment HeaderContent { get; set; }

    [Parameter]
    public RenderFragment<object> TableHeaderContent { get; set; }

    [Parameter]
    public RenderFragment<object> TableRowContent { get; set; }

    [Parameter]
    public RenderFragment FooterContent { get; set; }

    private IList xItems = null;

    [Parameter]
    public IList Items
    {
        get { return xItems; }
        set
        {
            if (xItems != value)
            {
                xItems = value;
                xHasFilteredItems = false;
    //ResetData();
            }
        }
    }


    [Parameter]
    public IList ItemsFiltered { get; set; }

    [Parameter]
    public Int16 ItemsFilterStartLen { get; set; } = 0;

    private object xSelectedItem = null;

    [Parameter]
    public object SelectedItem
    {
        get { return xSelectedItem; }
        set
        {
            if (xSelectedItem != value)
            {
                xSelectedItem = value;
                OnSelectedItemChanged.InvokeAsync(xSelectedItem);
                StateHasChanged();
            }
        }
    }

    [Parameter]
    public Func<object, string, bool> FilterItemMethod { get; set; } = null;

    [Parameter]
    public Func<object, string> SelectedValueTextMethod { get; set; } = null;

    [Parameter]
    public EventCallback<ButtonOkClickEventValue> OnButtonOKClick { get; set; }

    [Parameter]
    public EventCallback<string> TextChanged { get; set; }

    [Parameter]
    public EventCallback<object> OnTextChanged { get; set; }

    [Parameter]
    public EventCallback<object> OnTextSelectedValueChanged { get; set; }

    [Parameter]
    public EventCallback<object> OnSelectedItemChanged { get; set; }

    public class ButtonOkClickEventValue
    {
        public ButtonOkClickEventValue(JelineksoftVirtualKeyboard.KeyboardButtonTypeEnum key, object item, string xText)
        {
            KeyFireEvent = key;
            SelectedItem = item;
            InputText = xText;
        }

        public object SelectedItem { get; set; }
        public JelineksoftVirtualKeyboard.KeyboardButtonTypeEnum KeyFireEvent { get; set; }
        public string InputText { get; set; }
    }

    private int ItemStartIndex { get; set; } = 0;
    private bool isInitialized = false;


    public bool IsOpen { get; set; } = false;
    public bool HasFocusIn { get; set; } = false;
    private ElementReference refInputBox;


    protected override void OnInitialized()
    {
        Console.WriteLine("OnInitialized.");

        isInitialized = true;

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    protected override bool ShouldRender()
    {
        return isInitialized;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            
            Console.WriteLine("FirstRender.");
            FilterItems(true);
        }
        base.OnAfterRender(firstRender);
    }

    public async Task FocusAsync()
    {
        await Task.Delay(500);
        if (refInputBox.Context != null)
        {
           await refInputBox.FocusAsync();
        }
    }

    public void FilterData()
    {
        xLastFilteredString = "";
        xHasFilteredItems = false;
        FilterItems(true);
    }

    private string xLastFilteredString = "";

    bool xStopFiltering = false;
    bool xIsFiltering = false;
    bool xHasFilteredItems = false;

    private void FilterItems(bool xForce = false)
    {
        if (!isInitialized) return;
        Console.WriteLine($"FilterItems - xText: {xText}");

        LogT("FilterItems", $"Text={xText}");

        // if (SelectedValueTextMethod == null)
        // {
        //     LogT("FilterItems", $"SelectedValueTextMethod is NULL - set value to user text.");
        //     SetSelectedItem(xText);
        //     return;
        // }
        // else
        // {
        //     LogT("FilterItems", $"SelectedValueTextMethod is NOT NULL.");
        // }


        if (Items == null)
        {
            LogT("FilterItems", $"Items are null.");
            ItemsFiltered = null;
            xHasFilteredItems = false;
            SetSelectedItem(null);
            return;
        }
        if (FilterItemMethod == null)
        {
            LogD("FilterItems", $"FilterItemMethod is null. Filtering is not enabled.");
            if (ItemsFiltered != Items) ItemsFiltered = Items;
            return;
        }

        if ((xText.Length >= ItemsFilterStartLen) || xForce)
        {
            if ((xText == xLastFilteredString) && (xForce == false))
            {
                LogT("FilterItems", $"Text is same as last filtered text. Return with no filter items.");
                return;
            }

            if (xIsFiltering)
            {
                xStopFiltering = true;
                var xCnt = 0;
                while (xStopFiltering)
                {
                    System.Threading.Thread.Sleep(100);
                    xCnt++;
                    LogT("FilterData", "Waiting to stop filtering...");
                    if (xCnt > 20)
                    {
                        LogT("FilterData", "Return form waiting stop filtering...");
                        return;
                    }
                }
            }
            xIsFiltering = true;

            var xItemsToFilter = Items;
            if ((xLastFilteredString.Length < xText.Length) && (xForce == false))
            {
                 //Zruseni filtrovani pokud nejsou polozky k filtrovani                
                if (xHasFilteredItems)
                {
                    if (ItemsFiltered != null)
                    {
                        LogT("FilterItems", $"Filtering will be from filtered items. xLastFilteredString: {xLastFilteredString} xText: {xText} xForce {xForce} ItemsFiltered.Count {ItemsFiltered}");
                        xItemsToFilter = ItemsFiltered;
                    }
                }
            }
            ItemsFiltered = new List<object>();
            foreach (var item in xItemsToFilter)
            {
                LogT("FilterItems", $"Call FilterItemMethod.");
                var xAdd = FilterItemMethod(item, xText);
                LogT("FilterItems", $"Return {xAdd} from FilterItemMethod.");
                if (xAdd)
                {
                    ItemsFiltered.Add(item);
                }
                else
                {
                    if (SelectedItem == item)
                    {
                        LogT("FilterItems", $"Set SelectedItem to null because is not in filtered items.");
                        SetSelectedItem(null); //Reset slected item when is not in filtered items
                    }
                }
            }
            xHasFilteredItems = true;
            xIsFiltering = false;
            if (AutoSelectItem)
            {
                if (ItemsFiltered.Count == 1)
                {
                    LogD("FilterItems", $"Set automatic SelectedItem because filtered items count is 1 and AutoSelectItem=true.");
                    SetSelectedItem(ItemsFiltered[0]);
                }
            }
            xLastFilteredString = xText;
        }
        else
        {
            ItemsFiltered = null;
            xLastFilteredString = "";
            xHasFilteredItems = false;
            if (HasFocusIn)
            {
                SetSelectedItem(null);
            }
        }
        StateHasChanged();
    }

    public void SetSelectedItem(object item, bool closePopUp = false)
    {
        LogT("SetSelectedItem", item == null ? "item is null" : item.ToString());
        SelectedItem = item;
        if (SelectedValueTextMethod != null)
        {
            LogD("SetSelectedItem", "Call SelectedValueTextMethod");
            TextSelectedValue = SelectedValueTextMethod(item);
        }
        else
        {
            LogT("SetSelectedItem", $"TextSelectedValue set with ToString = {item}");
            if (item != null)
            {
                TextSelectedValue = item.ToString();
            }
            else
            {
                TextSelectedValue = "";
            }
        }
        if (closePopUp)
        {
            PopUpClose();
        }
        StateHasChanged();
    }

    private string GetIsOpenClass()
    {
        //if (AutoOpenDropdownWhenFocus) return "jelineksoft-input-isopen";
        return (IsOpen ? "jelineksoft-input-isopen" : "jelineksoft-input-isclose");
    }


    private void OpenDropDownHandler()
    {
        IsOpen = !IsOpen;
        LogT("OpenDropDownHandler", $"IsOpen={IsOpen}");
        StateHasChanged();
    }


    private void ChangeFocusIn(bool hasFocus)
    {
        LogD("ChangeFocusIn", $"Has focus {hasFocus}.");
        HasFocusIn = hasFocus;
        if (AutoOpenDropdownWhenFocus)
        {
            if (HasFocusIn)
            {
                IsOpen = true;
            }
        }
        //StateHasChanged();
    }

    private void LogT(string subject, string desc)
    {
        if (Logger != null)
        {
            Logger.Trace(this, subject, desc);
        }
    }

    private void LogD(string subject, string desc)
    {
        if (Logger != null)
        {
            Logger.Debug(this, subject, desc);
        }
    }

    public void ResetData()
    {
        ItemsFiltered = null;
        SetSelectedItem(null);
        xText = "";
        ItemStartIndex = 0;
        xLastFilteredString = "";
        xHasFilteredItems = false;
        FilterItems();
    }

    private void InputBoxOnKeyUpHandler(KeyboardEventArgs obj)
    {
        if (obj != null)
        {
            LogT("KeyPress", $"KeyPress code: {obj.Code} key:{obj.Key}");
            //Console.WriteLine($"KeyPress code: {obj.Code} key:{obj.Key}");
            switch (obj.Code)
            {
                case "Escape":
                    KeyboardButtonClick("", JelineksoftVirtualKeyboard.KeyboardButtonTypeEnum.Esc);
                    break;
                case "Enter":
                case "NumpadEnter":
                    KeyboardButtonClick("", JelineksoftVirtualKeyboard.KeyboardButtonTypeEnum.Enter);
                    break;
                case "Tab":
                    KeyboardButtonClick("", JelineksoftVirtualKeyboard.KeyboardButtonTypeEnum.Tab);
                    break;
            }
        }
       // FilterData();
    }

    public void KeyboardButtonClick(string keys)
    {
        KeyboardButtonClick(keys, JelineksoftVirtualKeyboard.KeyboardButtonTypeEnum.Default);
    }

    public void KeyboardButtonClick(string keys, JelineksoftVirtualKeyboard.KeyboardButtonTypeEnum type)
    {
        LogT("KeyboardButtonClick", $"Handle event {keys} {type}.");
        switch (type)
        {
            case JelineksoftVirtualKeyboard.KeyboardButtonTypeEnum.Esc:
            case JelineksoftVirtualKeyboard.KeyboardButtonTypeEnum.Clear:
                Text = "";
                SetSelectedItem(null);
                break;
            case JelineksoftVirtualKeyboard.KeyboardButtonTypeEnum.Del:
                if (this.Text.Length > 0)
                {
                    this.Text = this.Text.Substring(0, this.Text.Length - 1);
                }
                break;
            case JelineksoftVirtualKeyboard.KeyboardButtonTypeEnum.Enter:
                IsOpen = false;
                ChangeFocusIn(false);
                StateHasChanged();
                OnButtonOKClick.InvokeAsync(new ButtonOkClickEventValue(type, SelectedItem, xText));
                break;
            case JelineksoftVirtualKeyboard.KeyboardButtonTypeEnum.Tab:
                IsOpen = false;
                ChangeFocusIn(false);
                StateHasChanged();
                OnButtonOKClick.InvokeAsync(new ButtonOkClickEventValue(type, SelectedItem, xText));
                break;
            case JelineksoftVirtualKeyboard.KeyboardButtonTypeEnum.Space:
                this.Text = this.Text + " ";
                break;
            case JelineksoftVirtualKeyboard.KeyboardButtonTypeEnum.SelectedItemDefault:
                SetSelectedItem(null);
                StateHasChanged();
                FocusAsync();
                break;

            default:
                this.Text = this.Text + keys;
                break;
        }
    }

    private bool ShowKeyboardUI()
    {
        var xShow = false;
        if (KeyboardShow.HasValue == false)
        {
            xShow = Configuration.ShowKeyboard;
        }
        else
        {
            xShow = KeyboardShow.Value;
        }
        return xShow;
    }

    private void VirtualKbClick(JelineksoftVirtualKeyboard.KeyClickEvent e)
    {
        LogT("VirtualKbClick", $"Handle event {e.Keys} {e.Type}.");
        KeyboardButtonClick(e.Keys, e.Type);
    }


    public void Dispose()
    {
    }

    public string GetInputText()
    {
        return xText;
    }

    public void SetInputText(string txt)
    {
        xText = txt;
    }

    public void PopUpOpen()
    {
        IsOpen = true;
        StateHasChanged();
    }

    public void PopUpClose()
    {
        IsOpen = false;
        StateHasChanged();
    }

    private void OnFocusInHandler()
    {
        ChangeFocusIn(true);
        //Console.WriteLine("Banik pico...");
    }

    private void OnFocusOutHandler(FocusEventArgs obj)
    {
        ChangeFocusIn(false);
    }

}

<style>
    /*showcases the concept, move to site stylesheet, of course*/

</style>